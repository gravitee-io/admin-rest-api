openapi: 3.0.1
info:
  title: Gravitee.io Portal Rest API
  description: API dedicated to the devportal part of Gravitee
  termsOfService: terms
  contact:
    name: The Gravitee Team
    url: https://gravitee.io
    email: contact@graviteesource.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: "0.5.2"
servers:
  - url: http://demo.gravitee.io/portal/{envId}
    description: The portal API for a given environment
    variables:
      envId:
        default: DEFAULT
        description: ID of the environment
tags: 
  - name: Analytics
    description: All about application analytics
  - name: API
    description: All about APIs
  - name: Applications
    description: All about applications
  - name: Documentation
    description: All about documentation of the portal
  - name: Portal
    description: All about portal configurations
  - name: Subscription
    description: All about subscriptions
  - name: User
    description: All about the current user
  - name: Users
    description: All about the portal users

security:
  - BasicAuth: []

paths: 
  /apis:
    get:
      tags:
        - API
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/apiContextPathQueryParam'
        - $ref: '#/components/parameters/apiLabelQueryParam'
        - $ref: '#/components/parameters/apiVersionQueryParam'
        - $ref: '#/components/parameters/apiNameQueryParam'
        - $ref: '#/components/parameters/apiViewQueryParam'
        - $ref: '#/components/parameters/apiCategoryQueryParam'
      description: Get an API List, filtered and sorted with queryparam if present
      operationId: getApis
      security: []
      responses:
        200:
          $ref: '#/components/responses/ApisSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /apis/{apiId}:
    parameters:
      - $ref: '#/components/parameters/apiIdParam'
    get:
      tags:
        - API
      parameters:
        - $ref: '#/components/parameters/apiIncludeParam'
      description: Get an API
      operationId: getApiByApiId
      security: []
      responses:
        200:
          $ref: '#/components/responses/ApiSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /apis/{apiId}/pages:
    parameters:
      - $ref: '#/components/parameters/apiIdParam'
    get:
      tags:
        - API
        - Documentation
      parameters: 
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/homePageQueryParam'
        - $ref: '#/components/parameters/parentPageQueryParam'
      description: Get documentation of an API
      operationId: getPagesByApiId
      security: []
      responses:
        200:
          $ref: '#/components/responses/PagesSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /apis/{apiId}/pages/{pageId}:
    parameters:
      - $ref: '#/components/parameters/apiIdParam'
      - $ref: '#/components/parameters/pageIdParam'
    get:
      tags:
        - API
        - Documentation
      description: Get a single documentation page of an API
      operationId: getPageByApiIdAndPageId
      security: []
      responses:
        200:
          $ref: '#/components/responses/PageSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /apis/{apiId}/picture:
    parameters:
      - $ref: '#/components/parameters/apiIdParam'
    get:
      tags:
        - API
      description: Get picture of an API
      operationId: getPictureByApiId
      security: []
      responses:
        200:
          $ref: '#/components/responses/PictureSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /apis/{apiId}/plans:
    parameters:
      - $ref: '#/components/parameters/apiIdParam'
    get:
      tags:
        - API
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
      description: Get plans of an API
      operationId: getApiPlansByApiId
      security: []
      responses:
        200:
          $ref: '#/components/responses/PlansSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /apis/{apiId}/ratings:
    parameters:
      - $ref: '#/components/parameters/apiIdParam'
    get:
      tags:
        - API
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
      description: Get ratings of an API
      operationId: getApiRatingsByApiId
      security: []
      responses:
        200:
          $ref: '#/components/responses/RatingsSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - API
      description: Create a rating for an API
      operationId: createApiRatingForApi
      requestBody:
        $ref: '#/components/requestBodies/ratingInputBody'
      security:
        - BasicAuth: []
      responses:
        200:
          $ref: '#/components/responses/RatingSuccess'
        500:
          $ref: '#/components/responses/GeneralError'

  /applications:
    get:
      tags:
        - Applications
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
      description: Get an application List of the current user
      operationId: getApplications
      responses:
        200:
          $ref: '#/components/responses/ApplicationsSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/applicationCreateInputBody'
      description: Create an application
      operationId: createApplication
      responses:
        201:
          $ref: '#/components/responses/ApplicationSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    get:
      tags:
        - Applications
      description: Get an application
      operationId: getApplicationByApplicationId
      responses:
        200:
          $ref: '#/components/responses/ApplicationSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    put:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/applicationUpdateInputBody'
      description: Update an application
      operationId: updateApplicationByApplicationId
      responses:
        200:
          $ref: '#/components/responses/ApplicationSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    delete: 
      tags:
        - Applications
      description: Delete an application
      operationId: deleteApplicationByApplicationId
      responses:
        204:
          description: No-Content
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}/picture:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    get:
      tags:
        - Applications
      description: Get an application picture
      operationId: getApplicationPictureByApplicationId
      responses:
        200:
          $ref: '#/components/responses/PictureSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    put:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/pictureUpdateInputBody'
      description: Update an application picture
      operationId: updateApplicationPictureByApplicationId
      responses:
        200:
          $ref: '#/components/responses/PictureSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}/notifications:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    get:
      tags:
        - Applications
      description: Get application notifications
      operationId: getNotificationsByApplicationId
      responses:
        200:
          $ref: '#/components/responses/NotificationConfigsSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/notificationCreateInputBody'
      description: Create a notification for an application
      operationId: createApplicationNotification
      responses:
        200:
          $ref: '#/components/responses/NotificationConfigSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    put:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/notificationPortalUpdateInputBody'
      description: Update a portal notification for an application
      operationId: updatePortalApplicationNotification
      responses:
        200:
          $ref: '#/components/responses/NotificationConfigSuccess'
        500:
          $ref: '#/components/responses/GeneralError' 
  /applications/{applicationId}/notifications/{notificationId}:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
      - $ref: '#/components/parameters/notificationIdParam'
    put:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/notificationGenericUpdateInputBody'
      description: Update a generic notification for an application
      operationId: updateGenericApplicationNotification
      responses:
        200:
          $ref: '#/components/responses/NotificationConfigSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    delete: 
      tags:
        - Applications
      description: Delete a notification
      operationId: deleteApplicationNotificationByNotificationId
      responses:
        204:
          description: No-Content
        500:
          $ref: '#/components/responses/GeneralError' 
  /applications/{applicationId}/members:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    get:
      tags:
        - Applications
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
      description: Get application members
      operationId: getMembersByApplicationId
      responses:
        200:
          $ref: '#/components/responses/MembersSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/memberCreateInputBody'
      description: Create a member for an application
      operationId: createApplicationMember
      responses:
        200:
          $ref: '#/components/responses/MemberSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}/members/_transfer_ownership:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    post:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/memberTransferOwnershipInputBody'
      description: transfer ownership of an application
      operationId: transferMemberOwnership
      responses:
        204:
          description: No-Content
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}/members/{memberId}:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
      - $ref: '#/components/parameters/memberIdParam'
    get:
      tags:
        - Applications
      description: get a member
      operationId: getApplicationMemberByApplicationIdAndMemberId
      responses:
        200:
          $ref: '#/components/responses/MemberSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    put:
      tags:
        - Applications
      requestBody:
        $ref: '#/components/requestBodies/memberUpdateInputBody'
      description: update a member
      operationId: updateApplicationMemberByApplicationIdAndMemberId
      responses:
        200:
          $ref: '#/components/responses/MemberSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    delete:
      tags:
        - Applications
      description: delete a member
      operationId: deleteApplicationMember
      responses:
        204:
          description: No-Content
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}/analytics:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    get:
      tags:
        - Applications
        - Analytics
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/fromQueryParam'
        - $ref: '#/components/parameters/toQueryParam'
        - $ref: '#/components/parameters/intervalQueryParam'
        - $ref: '#/components/parameters/queryQueryParam'
        - $ref: '#/components/parameters/keyQueryParam'
        - $ref: '#/components/parameters/fieldQueryParam'
        - $ref: '#/components/parameters/analyticTypeQueryParam'
        - $ref: '#/components/parameters/analyticRangeQueryParam'
        - $ref: '#/components/parameters/analyticAggregationQueryParam'
        - $ref: '#/components/parameters/analyticOrderQueryParam'

      description: Get application analytics
      operationId: getApplicationAnalytics
      responses:
        200:
          $ref: '#/components/responses/AnalyticsSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}/logs:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    get:
      tags:
        - Applications
        - Analytics
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/fromQueryParam'
        - $ref: '#/components/parameters/toQueryParam'
        - $ref: '#/components/parameters/queryQueryParam'
        - $ref: '#/components/parameters/fieldQueryParam'
        - $ref: '#/components/parameters/orderQueryParam'
      description: Get application logs
      operationId: getApplicationLogs
      responses:
        200:
          $ref: '#/components/responses/LogsSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}/logs/_export:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    post:
      tags:
        - Applications
        - Analytics
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/fromQueryParam'
        - $ref: '#/components/parameters/toQueryParam'
        - $ref: '#/components/parameters/queryQueryParam'
        - $ref: '#/components/parameters/fieldQueryParam'
        - $ref: '#/components/parameters/orderQueryParam'
      description: Export logs in CSV format
      operationId: exportApplicationLogsByApplicationId
      responses:
        200:
          $ref: '#/components/responses/LogsExportSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /applications/{applicationId}/logs/{logId}:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
      - $ref: '#/components/parameters/logIdParam'

    get:
      tags:
        - Applications
        - Analytics
      parameters:
        - $ref: '#/components/parameters/logTimestampQueryParam'
      description: get a single log of an application
      operationId: getApplicationLogByApplicationIdAndLogId
      responses:
        200:
          $ref: '#/components/responses/LogSuccess'
        500:
          $ref: '#/components/responses/GeneralError'      
  /applications/{applicationId}/_renew_secret:
    parameters:
      - $ref: '#/components/parameters/applicationIdParam'
    post:
      tags:
        - Applications
      description: Renew secret of this application
      operationId: renewApplicationSecret
      responses:
        200:
          $ref: '#/components/responses/ApplicationSuccess'
        500:
          $ref: '#/components/responses/GeneralError'

  /pages:
    get:
      tags:
        - Documentation
      parameters: 
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
        - $ref: '#/components/parameters/homePageQueryParam'
        - $ref: '#/components/parameters/parentPageQueryParam'
      description: Get all the documention pages of the portal
      operationId: getPages
      security: []
      responses:
        200:
          $ref: '#/components/responses/PagesSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /pages/{pageId}:
    parameters:
      - $ref: '#/components/parameters/pageIdParam'
    get:
      tags:
        - Documentation
      parameters:
        - $ref: '#/components/parameters/pageIdParam'
      description: Get a documention page of the portal
      operationId: getPageByPageId
      security: []
      responses:
        200:
          $ref: '#/components/responses/PageSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  
  /subscriptions:
    get:
      tags:
        - Subscription
      parameters:
        - $ref: '#/components/parameters/subscriptionApiQueryParam'
        - $ref: '#/components/parameters/subscriptionApplicationQueryParam'
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
      description: get a list of subscriptions, filtered by api and/or by application. At least an api or an application must be provided
      operationId: getSubscriptions
      responses:
        200:
          $ref: '#/components/responses/SubscriptionsSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    post:
      tags:
        - Subscription
      requestBody:
        $ref: '#/components/requestBodies/subscriptionCreateInputBody'
      description: create a subscription
      operationId: createSubscription
      responses:
        200:
          $ref: '#/components/responses/SubscriptionSuccess'
        500:
          $ref: '#/components/responses/GeneralError'        
  /subscriptions/{subscriptionId}:
    parameters:
      - $ref: '#/components/parameters/subscriptionIdParam'
    get:
      tags:
        - Subscription
      description: get a subscription
      operationId: getSubscriptionBuySubscriptionId
      responses:
        200:
          $ref: '#/components/responses/SubscriptionSuccess'
        500:
          $ref: '#/components/responses/GeneralError'        
  /subscriptions/{subscriptionId}/_close:
    parameters:
      - $ref: '#/components/parameters/subscriptionIdParam'
    post:
      tags:
        - Subscription
      description: close a subscription
      operationId: closeSubscription
      responses:
        204:
          description: No-Content
        500:
          $ref: '#/components/responses/GeneralError'       
  /subscriptions/{subscriptionId}/keys/_renew:
    parameters:
      - $ref: '#/components/parameters/subscriptionIdParam'
    post:
      tags:
        - Subscription
      requestBody:
        $ref: '#/components/requestBodies/subscriptionKeysRenewInputBody'
      description: renew a key subscription
      operationId: renewKeySubscription
      responses:
        500:
          $ref: '#/components/responses/GeneralError'       
  /subscriptions/{subscriptionId}/keys/{keyId}/_revoke:
    parameters:
      - $ref: '#/components/parameters/subscriptionIdParam'
      - name: keyId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Subscription
      description: revoke a key subscription
      operationId: revokeKeySubscription
      responses:
        204:
          description: No-Content
        500:
          $ref: '#/components/responses/GeneralError'

  /users:
    get:
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
      description: Retrieve all user
      operationId: getUsers
      responses:
        200:
          $ref: '#/components/responses/UsersSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /user:
    get:
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/userIncludeParam'
      description: Retrieve user's information
      operationId: getCurrentUser
      responses:
        200:
          $ref: '#/components/schemas/User'
        500:
          $ref: '#/components/responses/GeneralError'
    put:
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/userUpdateInputBody'
      description: Modify user's information
      operationId: updateCurrentUser
      responses:
        200:
          $ref: '#/components/responses/UserSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /user/notifications:
    get:
      tags:
       - User
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
      description: Retrieve user's notifications
      operationId: getCurrentUserNotifications
      responses:
        200:
          $ref: '#/components/responses/NotificationsSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    delete:
      tags:
       - User
      description: Delete all notifications of the current user
      operationId: deleteAllCurrentUserNotifications
      responses:
        204:
          description: No-Content
        500:
          $ref: '#/components/responses/GeneralError'        
  /user/notifications/{notificationId}:
    parameters:
        - $ref: '#/components/parameters/notificationIdParam'
    delete:
      tags:
       - User
      description: Delete a specific notification from the current user
      operationId: deleteCurrentUserNotificationByNotificationId
      responses:
        204:
          description: No-Content
        500:
          $ref: '#/components/responses/GeneralError'
  /user/avatar:
    get:
      tags:
        - User
      description: Retrieve user's avatar
      operationId: getCurrentUserAvatar
      responses:
        200:
          $ref: '#/components/responses/PictureSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
    put:
      tags:
        - User
      requestBody:
        $ref: '#/components/requestBodies/pictureUpdateInputBody'
      description: Change user's avatar
      operationId: setUserAvatar
      responses:
        200:
          $ref: '#/components/responses/PictureSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  
  /views:
    get:
      tags:
        - Portal
      parameters:
        - $ref: '#/components/parameters/pageNumberParam'
        - $ref: '#/components/parameters/pageSizeParam'
      description: Get a View list
      operationId: getViews
      security: []
      responses:
        200:
          $ref: '#/components/responses/ViewsSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /views/{viewId}:
    parameters:
      - $ref: '#/components/parameters/viewIdParam'
    get:
      tags:
        - Portal
      description: Get a View
      operationId: getViewByViewId
      security: []
      responses:
        200:
          $ref: '#/components/responses/ViewSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /views/{viewId}/picture:
    parameters:
      - $ref: '#/components/parameters/viewIdParam'
    get:
      tags:
        - Portal
      description: Get picture of a View
      operationId: getPictureByViewId
      security: []
      responses:
        200:
          $ref: '#/components/responses/PictureSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /configuration:
    get:
      tags: 
        - Portal
      responses:
        500:
          $ref: '#/components/responses/GeneralError'
  /configuration/identities:
    get:
      tags: 
        - Portal
      responses:
        500:
          $ref: '#/components/responses/GeneralError'
  /info:
    get:
      tags: 
        - Portal
      responses:
        500:
          $ref: '#/components/responses/GeneralError'

  /auth/login:
    post:
      tags: 
        - Authentication
      responses:
        200:
          $ref: '#/components/responses/LoginSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /auth/logout:
    post:
      tags: 
        - Authentication
      responses:
        200:
          $ref: '#/components/responses/LogoutSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /auth/oauth2/{identity}:
    post:
      tags: 
        - Authentication
      parameters:
        - name: identity
          in: path
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/oauth2InputBody'
      responses:
        200:
          $ref: '#/components/responses/LoginSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
  /auth/oauth2/{identity}/_exchange:
    post:
      tags: 
        - Authentication
      parameters:
        - name: identity
          in: path
          required: true
          schema:
            type: string
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/LoginSuccess'
        500:
          $ref: '#/components/responses/GeneralError'
components:
  requestBodies:
    ratingInputBody:
      description: use to add a rating to an api
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RatingInput'
    applicationCreateInputBody:
      description: use to create an application
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApplicationInput'
    applicationUpdateInputBody:
      description: use to update an application
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Application'
    pictureUpdateInputBody:
      description: use to update an application
      content:
        'image/*':
          schema:
            type: string
            format: binary
    notificationCreateInputBody:
      description: use to create an notification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericNotificationConfig'
    notificationGenericUpdateInputBody:
      description: use to update a generic notification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericNotificationConfig'
    notificationPortalUpdateInputBody:
      description: use to update a generic notification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PortalNotificationConfig'
    memberCreateInputBody:
      description: use to create a member
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberInput'
    memberUpdateInputBody:
      description: use to update a member
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MemberInput'
    memberTransferOwnershipInputBody:
      description: use to transfer ownership of an application
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransferOwnershipInput'
    subscriptionCreateInputBody:
      description: use to create a subscription
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionInput'
    subscriptionKeysRenewInputBody:
      description: use to renew keys of a subscription
      content:
        application/json:
          schema:
            type: array
            items:
              type: string
    userUpdateInputBody:
      description: use to update a user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    oauth2InputBody:
      description: oauth2 payload for authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PayloadInput'
  parameters:
    apiIdParam: 
      name: apiId
      in: path
      required: true
      description: id of an API
      schema:
        type: string
    apiContextPathQueryParam:
      name: context-path
      in: query
      required: false
      description: the context-path of an API
      schema:
        type: string
    apiLabelQueryParam:
      name: label
      in: query
      required: false
      description: one of the labels of an API
      schema:
        type: string
    apiVersionQueryParam:
      name: version
      in: query
      required: false
      description: the version of an API
      schema:
        type: string
    apiNameQueryParam:
      name: name
      in: query
      required: false
      description: the name of an API
      schema:
        type: string
    apiViewQueryParam:
      name: view
      in: query
      required: false
      description: one of the view linked with an API
      schema:
        type: string
    apiCategoryQueryParam:
      name: cat
      in: query
      required: false
      description: |
        name of a static filter to use.
        <ul>
          <li>MINE : apis of the current user. Sorted alphabetically</li>
          <li>STARRED: only rated apis. Sorted by Ratings DESC</li>
          <li>TRENDINGS: only apis with subscriptions. Sorted by number of subscriptions DESC</li>
        </ul>
      schema:
        $ref: '#/components/schemas/CategoryApiQuery'
    pageIdParam: 
      name: pageId
      in: path
      required: true
      description: id of a documentation page
      schema:
        type: string
    pageNumberParam:
      name: page
      in: query
      required: false
      description: the page number for pagination
      schema:
        type: integer
        default: 1
    pageSizeParam:
      name: size
      in: query
      required: false
      description: the number of items per page required, for pagination
      schema:
        type: integer
        default: 10
    apiIncludeParam:
      name: include
      in: query
      required: false
      description: comma-separated list of related object to include in the response
      schema:
        type: array
        items:
          type: string
          enum:
            - pages
            - plans
    homePageQueryParam:
      name: homepage
      in: query
      required: false
      description: if true, only the documentation page homepage of the portal is returned
      schema:
        type: boolean
    parentPageQueryParam:
      name: parent
      in: query
      required: false
      description: the name of the parent documentation page. If not null, only this page and its children are returned
      schema:
        type: string
    applicationIdParam: 
      name: applicationId
      in: path
      required: true
      description: id of an Application
      schema:
        type: string
    fromQueryParam:
      name: from
      in: query
      required: false
      description: lower bound of timestamp for filtering
      schema:
        type: integer
        format: int64
    toQueryParam:
      name: to
      in: query
      required: false
      description: upper bound of timestamp for filtering
      schema:
        type: integer
        format: int64
    queryQueryParam:
      name: query
      in: query
      required: false
      description: query used for filtering
      schema:
        type: string
    fieldQueryParam:
      name: field
      in: query
      required: false
      description: field used for filtering
      schema:
        type: string
    orderQueryParam:
      name: order
      in: query
      required: false
      description: order used to filter the result list
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ASC
    intervalQueryParam:
      name: interval
      in: query
      required: false
      description : interval for time search
      schema:
        type: integer
        minimum: 1000
        maximum: 1000000000
        exclusiveMinimum: true
        exclusiveMaximum: true
    keyQueryParam:
      name: key
      in: query
      required: false
      schema:
        type: string
    analyticTypeQueryParam:
      name: type
      in: query
      required: false
      schema:
        type: string
        enum:
          - GROUP_BY
          - DATE_HISTO
          - COUNT
    analyticRangeQueryParam:
      name: range
      in: query
      required: false
      schema:
        type: string
    analyticAggregationQueryParam:
      name: aggs
      in: query
      required: false
      schema:
        type: string
    analyticOrderQueryParam:
      name: order
      in: query
      required: false
      schema:
        type: string
    logTimestampQueryParam:
      name: timestamp
      in: query
      required: false
      description: used to select the right index
      schema:
        type: integer
        format: int64
    notificationIdParam: 
      name: notificationId
      in: path
      required: true
      description: id of a notification
      schema:
        type: string
        
    memberIdParam: 
      name: memberId
      in: path
      required: true
      description: id of a member
      schema:
        type: string
    logIdParam: 
      name: logId
      in: path
      required: true
      description: id of a log
      schema:
        type: string

    subscriptionIdParam: 
      name: subscriptionId
      in: path
      required: true
      description: id of a subscription
      schema:
        type: string
    subscriptionApiQueryParam:
      name: apiId
      in: query
      required: false
      description: id of an api
      schema:
        type: string
    subscriptionApplicationQueryParam:
      name: applicationId
      in: query
      required: false
      description: id of an application
      schema:
        type: string
    userIncludeParam:
      name: include
      in: query
      required: false
      description: comma-separated list of related object to include in the response
      schema:
        type: array
        items:
          type: string
          enum:
            - tasks
            - notifications
    viewIdParam: 
      name: viewId
      in: path
      required: true
      description: id of a View
      schema:
        type: string
  schemas:
    #####################
    # Responses Objects #
    #####################
    ErrorResponse:
      type: array
      items:
        $ref: '#/components/schemas/Error'
    
    DatasResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Data'
        metadata:
            $ref: '#/components/schemas/MetadataMap'
        links:
          $ref: '#/components/schemas/Links'
    
    NotificationConfigsResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/NotificationConfig'
    #####################
    # Resources Objects #
    #####################
    Error:
      properties:
        code:
          type: string
        title:
          type: string
        detail:
          type: string
    Data:
      properties:
        id: 
          type: string
        dataType: 
          type: string
      discriminator:
        propertyName: dataType
    Api:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          required:
            - name
            - version
            - description
            - owner
          properties:
            name: 
              type: string
            version: 
              type: string
            description:
              type: string
            draft:
              type: boolean
              description: wether or not the API is public 
            entrypoints:
              type: array
              items:
                type: string
            labels: 
              type: array
              items:
                type: string
            owner:
              $ref: '#/components/schemas/User'
            views: 
              type: array
              items:
                type: string
            rating_summary: 
              $ref: '#/components/schemas/RatingSummary'
            _links:
              $ref: '#/components/schemas/ApiLinks'
            
            ###################
            # may be included #
            ###################
            pages:
              type: array
              items:
                $ref: '#/components/schemas/Page'
            plans:
              type: array
              items:
                $ref: '#/components/schemas/Plan'
    Page:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          required:
            - name
            - type
            - order
          properties:
            name:
              type: string
            type:
              type: string
              enum:
              - SWAGGER
              - MARKDOWN
              - FOLDER
              - ROOT
            order:
              type: integer
            parent:
              type: string
            updated_at:
              type: string
              format: date-time
            content:
              type: string
            configuraton:
              type: array
              items:
                $ref: '#/components/schemas/PageConfiguration'
            metadata:
              type: array
              items:
                $ref: '#/components/schemas/Metadata'
    Plan:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          required:
            - name
            - security
            - type
            - description
            - validation
            - order
            - comment_required
          properties:
            name:
              type: string
            security:
              type: string
              enum:
                - API_KEY
                - KEY_LESS
                - JWT
                - OAUTH2
            description:
              type: string
            characteristics:
              type: array
              items:
                type: string
            validation:
              type: string
              enum:
                - AUTO
                - MANUAL
            order:
              type: integer
            subscribed:
              type: boolean
              description: true if at least one application linked to the current user has subscribed to this plan
            comment_required:
              type: boolean
            comment_question:
              type: string
    Rating:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          required:
            - title
            - value
            - comment
          properties:
            title:
              type: string
            value:
              type: integer
            author:
              $ref: '#/components/schemas/User'
            date:
              type: string
              format: date-time
            comment:
              type: string
            answers: 
              type: array
              items:
                $ref: '#/components/schemas/RatingAnswer'
    Application:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            applicationType:
              type: string
            owner:
              $ref: '#/components/schemas/User'
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            groups:
              type: array
              items:
                type: string
            settings:
              $ref: '#/components/schemas/ApplicationSettings'
            _links:
              $ref: '#/components/schemas/ApplicationLinks'
    NotificationConfig:
      properties:
        configType:
          type: string
        name:
          type: string
        reference_type:
          type: string
        reference_id:
          type: string
        hooks:
          type: array
          items:
            type: string
      discriminator:
        propertyName: configType
        mapping:
          GENERIC: '#/components/schemas/GenericNotificationConfig'
          PORTAL: '#/components/schemas/PortalNotificationConfig'
    GenericNotificationConfig:
      allOf:
        - $ref: "#/components/schemas/NotificationConfig"
        - type: object
          properties:
            id:
              type: string
            notifier:
              type: string
            config:
              type: string
            use_system_proxy:
              type: boolean
    PortalNotificationConfig:
      allOf:
        - $ref: "#/components/schemas/NotificationConfig"
        - type: object
          properties:
            user:
              type: string
    PortalNotification:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          properties:
            title:
              type: string
            message:
              type: string
            created_at:
              type: string
              format: date-time
    Member:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
            role:
              type: string

    Analytics:
      type: object
      required:
        - analyticsType
      properties:
        analyticType:
          type: string
      discriminator:
        propertyName: analyticsType
    DateHistoAnalytics:
      allOf:
        - $ref: '#/components/schemas/Analytics'
        - type: object
          properties:
            timestamp:
              $ref: '#/components/schemas/Timerange'
            values:
              type: array
              items:
                $ref: '#/components/schemas/Bucket'
    GroupByAnalytics:
      allOf:
        - $ref: '#/components/schemas/Analytics'
        - type: object
          properties:
            values:
              type: object
              additionalProperties:
                type: integer
                format: int64
            metadata:
              $ref: '#/components/schemas/MetadataMap'
    CountAnalytics:
      allOf:
        - $ref: '#/components/schemas/Analytics'
        - type: object
          properties:
            name:
              type: string
            hits:
              type: integer
              format: int64
    Log:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          properties:
            timestamp:
              type: integer
              format: int64
            transactionId:
              type: string
            path:
              type: string
            method:
              $ref: '#/components/schemas/HttpMethod'
            status:
              type: integer
            responseTime:
              type: integer
              format: int64
            requestContentLength:
              type: integer
              format: int64
            responseContentLength:
              type: integer
              format: int64
            plan:
              type: string
            api:
              type: string
            request:
              $ref: '#/components/schemas/Request'
            response:
              $ref: '#/components/schemas/Response'
            metadata:
              $ref: '#/components/schemas/MetadataMap'
            host:
              type: string
            user:
              type: string
            securityType:
              type: string
            securityToken:
              type: string
    Subscription:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          required:
            - api
            - application
            - plan
            - status
          properties:
            api:
              type: string
            application:
              type: string
            plan:
              type: string
            request:
              type: string
            created_at:
              type: string
              format: date-time
            processed_at:
              type: string
              format: date-time
            start_at:
              type: string
              format: date-time
            end_at:
              type: string
              format: date-time
            status:
              type: string
              enum:
                - PENDING
                - ACCEPTED
                - REJECTED
            ###################
            # may be included #
            ###################
            keys:
              type: array
              items:
                $ref: '#/components/schemas/Key'
    User:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
            display_name:
              type: string
            email:
              type: string
            avatar:
              type: string
            _links:
              $ref: '#/components/schemas/UserLinks'
    Token:
      properties:
        token_type:
          type: string
          enum:
            - BEARER
        token:
          type: string
    View:
      allOf:
        - $ref: "#/components/schemas/Data"
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            default_view:
              type: boolean
            order:
              type: integer
            total_apis:
              type: integer
              format: int64
            _links:
              $ref: '#/components/schemas/ViewLinks'
    #################
    # Input Objects #
    #################
    RatingInput:
      properties:
        title:
          type: string
        value:
          type: integer
          minimum: 0
          maximum: 5
        comment:
          type: string
    ApplicationInput:
      properties:
        name:
          type: string
        description:
          type: string
        groups:
          type: array
          items:
            type: string
        settings:
          $ref: '#/components/schemas/ApplicationSettings'
    MemberInput:
      properties:
        user:
          type: string
          description: User's technical identifier.
        reference:
          type: string
          description: User's reference for user providing from an identity provider.
        role:
          type: string
          description: Role's name
    SubscriptionInput:
      properties:
        application:
          description: id of the application which subscribe
          type: string
        plan:
          description: id of the plan to which the application subscribe
          type: string
        request:
          description: a request message to the api owner why a user want to subscribe
          type: string
    TransferOwnershipInput:
      properties:
        new_primary_owner:
         type: string
        primary_owner_newrole:
          type: string
    PayloadInput:
      properties:
        client_id:
          type: string
          minLength: 1
        redirect_uri:
          type: string
          minLength: 1
        code:
          type: string
          minLength: 1
        state:
          type: string
    #######################
    # Composition Objects #
    #######################
    ApplicationSettings:
      properties:
        app:
          $ref: '#/components/schemas/SimpleApplicationSettings'
        oauth:
          $ref: '#/components/schemas/OAuthClientSettings'
    SimpleApplicationSettings:
      properties:
        type:
          type: string
        client_id:
          type: string
    OAuthClientSettings:
      properties:
        client_secret:
          type: string
        client_id:
          type: string
        redirect_uris:
          type: array
          items:
            type: string
        client_uri:
          type: string
        logo_uri:
          type: string
        response_types:
          type: array
          items:
            type: string
        grant_types:
          type: array
          items:
            type: string
        application_type:
          type: string
        renew_client_secret_supported:
          type: boolean
    Metadata:
      properties:
        name:
          type: string
        value:
          type: string
        order:
          type: string
    RatingSummary:
      properties:
        average:
          type: number
          format: double
        count:
          type: number
        one_star:
          type: number
          format: double
        two_star:
          type: number
          format: double
        three_star:
          type: number
          format: double
        four_star:
          type: number
          format: double
        five_star:
          type: number
          format: double
    PageConfiguration:
      properties:
        key:
          type: string
        value:
          type: string
    RatingAnswer:
      properties: 
        author:
          $ref: '#/components/schemas/User'
        date:
          type: string
          format: date-time
        comment:
          type: string
    Key:
      properties:
        id:
          type: string
        api:
          type: string
        application:
          type: string
        plan:
          type: string
        paused:
          type: boolean
        revoked:
          type: boolean
        created_at:
          type: string
          format: date-time
        revoked_at:
          type: string
          format: date-time
    HttpMethod:
      type: string
      enum:
        - CONNECT
        - DELETE
        - GET
        - HEAD
        - OPTIONS
        - PATCH
        - POST
        - PUT
        - TRACE
        - OTHER
      default: OTHER
    HttpHeaders:
      type: array
      additionalProperties:
        type: array
        items:
          type: string
    Request:
      properties:
        method:
          $ref: '#/components/schemas/HttpMethod'
        headers:
          $ref: '#/components/schemas/HttpHeaders'
        uri:
          type: string
        body:
          type: string
    Response:
      properties:
        status:
          type: integer
        headers:
          $ref: '#/components/schemas/HttpHeaders'
        body:
          type: string
    MetadataMap:
      type: object
      additionalProperties:
        type: object
        additionalProperties: 
          type: string
    Bucket:
      properties:
        buckets:
          type: array
          items:
            $ref: '#/components/schemas/Bucket'
        field:
          type: string
        name:
          type: string
        data:
          type: array
          items:
            type: number
        metadata:
            $ref: '#/components/schemas/MetadataMap'
    Timerange:
      properties:
        from:
          type: integer
          format: int64
        to:
          type: integer
          format: int64
        interval:
          type: integer
          format: int64
    CategoryApiQuery:
      type: string
      enum:
        - MINE
        - STARRED
        - TRENDINGS
        - FEATURED
    #####################
    # Structure Objects #
    #####################
    Links:
      properties:
        self:
          type: string
        first:
          type: string
        last:
          type: string
        prev:
          type: string
        next:
          type: string
    ApiLinks:
      properties:
        self:
          type: string
        pages:
          type: string
        picture:
          type: string
        plans:
          type: string
        ratings:
          type: string
    ApplicationLinks:
      properties:
        self:
          type: string
        members:
          type: string
        notifications:
          type: string
        picture:
          type: string
    UserLinks:
      properties:
        self:
          type: string
        avatar:
          type: string
        notifications:
          type: string
    ViewLinks:
      properties:
        self:
          type: string
        highlighted_api:
          type: string
        picture:
          type: string

  responses:
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ApiSuccess:
      description: One API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Api'
    ApisSuccess:
      description: List of APIs
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasResponse'
    PageSuccess:
      description: One page
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Page'
    PagesSuccess:
      description: List of pages
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasResponse'
    PictureSuccess:
      description: an API picture
      content:
        'image/*':
          schema:
            type: string
            format: binary
    PlansSuccess:
      description: List of plans
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasResponse'
    RatingSuccess:
      description: One rating
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/Rating'
    RatingsSuccess:
      description: List of subscriptions
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/DatasResponse'
    ApplicationSuccess:
      description: One Application
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Application'
    ApplicationsSuccess:
      description: List of Applications
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasResponse'
    MemberSuccess:
      description: A member
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/Member'
    MembersSuccess:
      description: List of members
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/DatasResponse'
    NotificationConfigSuccess:
      description: A notification config
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/PortalNotificationConfig'
              - $ref: '#/components/schemas/GenericNotificationConfig'
    NotificationConfigsSuccess:
      description: List of notification configs
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/NotificationConfigsResponse'
    NotificationSuccess:
      description: A notification
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PortalNotification'
    NotificationsSuccess:
      description: List of notifications
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/DatasResponse'
    AnalyticsSuccess:
      description: Analytics
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/Analytics'
    LogSuccess:
      description: A log
      content:
        application/json:
          schema:  
           $ref: '#/components/schemas/Log'
    LogsSuccess:
      description: List of logs
      content:
        application/json:
          schema:  
            $ref: '#/components/schemas/DatasResponse'
    LogsExportSuccess:
      description: CSV export of the logs
      content:
        text/plain:
          schema:  
            type: string
    SubscriptionSuccess:
      description: One subscription
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subscription'
    SubscriptionsSuccess:
      description: List of Subscriptions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasResponse'
    UserSuccess:
      description: The current user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    UsersSuccess:
      description: List of platform users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasResponse'
    ViewSuccess:
      description: One View
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/View'
    ViewsSuccess:
      description: List of Views
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DatasResponse'
    LoginSuccess:
      description: Auth token in payload and bearer in cookie
      headers:
        set-sookie:
          description: auth cookie
          schema:
            type: string
            example: Auth-Graviteeio-APIM=Bearer%20xxxxxx;Path=/;HttpOnly
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Token'
    LogoutSuccess:
      description: An empty cookie
      headers:
        set-cookie:
          description: empty cookie
          schema:
            type: string
            example: Auth-Graviteeio-APIM=;Path=/;Expires=Thu, 01-Jan-1970 00:00:00 GMT;Max-Age=0;HttpOnly
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
